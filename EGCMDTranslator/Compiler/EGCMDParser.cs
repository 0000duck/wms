//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from EGCMD.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class EGCMDParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		TEXT_END=1, TEXT=2, WS=3, COMMAND_END=4, REPEAT=5, AREA=6, VAR=7, IN=8, 
		WRITE=9, SET=10, COLOR=11, DIGIT=12, ID=13, JS_END=14, JSCHAR=15;
	public const int
		RULE_stat = 0, RULE_command = 1, RULE_text = 2, RULE_repeatCommand = 3, 
		RULE_writeCommand = 4, RULE_setColorCommand = 5, RULE_jsCommand = 6;
	public static readonly string[] ruleNames = {
		"stat", "command", "text", "repeatCommand", "writeCommand", "setColorCommand", 
		"jsCommand"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, "'REPEAT'", "'AREA'", "'VAR'", "'IN'", "'WRITE'", 
		"'SET'", "'COLOR'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "TEXT_END", "TEXT", "WS", "COMMAND_END", "REPEAT", "AREA", "VAR", 
		"IN", "WRITE", "SET", "COLOR", "DIGIT", "ID", "JS_END", "JSCHAR"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "EGCMD.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static EGCMDParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public EGCMDParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public EGCMDParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class StatContext : ParserRuleContext {
		public TextContext text() {
			return GetRuleContext<TextContext>(0);
		}
		public CommandContext[] command() {
			return GetRuleContexts<CommandContext>();
		}
		public CommandContext command(int i) {
			return GetRuleContext<CommandContext>(i);
		}
		public StatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEGCMDListener typedListener = listener as IEGCMDListener;
			if (typedListener != null) typedListener.EnterStat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEGCMDListener typedListener = listener as IEGCMDListener;
			if (typedListener != null) typedListener.ExitStat(this);
		}
	}

	[RuleVersion(0)]
	public StatContext stat() {
		StatContext _localctx = new StatContext(Context, State);
		EnterRule(_localctx, 0, RULE_stat);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 14; text();
			State = 18;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << REPEAT) | (1L << WRITE) | (1L << SET))) != 0)) {
				{
				{
				State = 15; command();
				}
				}
				State = 20;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommandContext : ParserRuleContext {
		public RepeatCommandContext repeatCommand() {
			return GetRuleContext<RepeatCommandContext>(0);
		}
		public WriteCommandContext writeCommand() {
			return GetRuleContext<WriteCommandContext>(0);
		}
		public SetColorCommandContext setColorCommand() {
			return GetRuleContext<SetColorCommandContext>(0);
		}
		public CommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_command; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEGCMDListener typedListener = listener as IEGCMDListener;
			if (typedListener != null) typedListener.EnterCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEGCMDListener typedListener = listener as IEGCMDListener;
			if (typedListener != null) typedListener.ExitCommand(this);
		}
	}

	[RuleVersion(0)]
	public CommandContext command() {
		CommandContext _localctx = new CommandContext(Context, State);
		EnterRule(_localctx, 2, RULE_command);
		try {
			State = 24;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case REPEAT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 21; repeatCommand();
				}
				break;
			case WRITE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 22; writeCommand();
				}
				break;
			case SET:
				EnterOuterAlt(_localctx, 3);
				{
				State = 23; setColorCommand();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextContext : ParserRuleContext {
		public ITerminalNode TEXT_END() { return GetToken(EGCMDParser.TEXT_END, 0); }
		public ITerminalNode Eof() { return GetToken(EGCMDParser.Eof, 0); }
		public ITerminalNode[] TEXT() { return GetTokens(EGCMDParser.TEXT); }
		public ITerminalNode TEXT(int i) {
			return GetToken(EGCMDParser.TEXT, i);
		}
		public TextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_text; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEGCMDListener typedListener = listener as IEGCMDListener;
			if (typedListener != null) typedListener.EnterText(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEGCMDListener typedListener = listener as IEGCMDListener;
			if (typedListener != null) typedListener.ExitText(this);
		}
	}

	[RuleVersion(0)]
	public TextContext text() {
		TextContext _localctx = new TextContext(Context, State);
		EnterRule(_localctx, 4, RULE_text);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 29;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TEXT) {
				{
				{
				State = 26; Match(TEXT);
				}
				}
				State = 31;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 32;
			_la = TokenStream.LA(1);
			if ( !(_la==Eof || _la==TEXT_END) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepeatCommandContext : ParserRuleContext {
		public ITerminalNode REPEAT() { return GetToken(EGCMDParser.REPEAT, 0); }
		public ITerminalNode AREA() { return GetToken(EGCMDParser.AREA, 0); }
		public ITerminalNode[] DIGIT() { return GetTokens(EGCMDParser.DIGIT); }
		public ITerminalNode DIGIT(int i) {
			return GetToken(EGCMDParser.DIGIT, i);
		}
		public ITerminalNode VAR() { return GetToken(EGCMDParser.VAR, 0); }
		public ITerminalNode ID() { return GetToken(EGCMDParser.ID, 0); }
		public ITerminalNode IN() { return GetToken(EGCMDParser.IN, 0); }
		public JsCommandContext jsCommand() {
			return GetRuleContext<JsCommandContext>(0);
		}
		public ITerminalNode COMMAND_END() { return GetToken(EGCMDParser.COMMAND_END, 0); }
		public RepeatCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeatCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEGCMDListener typedListener = listener as IEGCMDListener;
			if (typedListener != null) typedListener.EnterRepeatCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEGCMDListener typedListener = listener as IEGCMDListener;
			if (typedListener != null) typedListener.ExitRepeatCommand(this);
		}
	}

	[RuleVersion(0)]
	public RepeatCommandContext repeatCommand() {
		RepeatCommandContext _localctx = new RepeatCommandContext(Context, State);
		EnterRule(_localctx, 6, RULE_repeatCommand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 34; Match(REPEAT);
			State = 35; Match(AREA);
			State = 36; Match(DIGIT);
			State = 37; Match(DIGIT);
			State = 38; Match(VAR);
			State = 39; Match(ID);
			State = 40; Match(IN);
			State = 41; jsCommand();
			State = 43;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMAND_END) {
				{
				State = 42; Match(COMMAND_END);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WriteCommandContext : ParserRuleContext {
		public ITerminalNode WRITE() { return GetToken(EGCMDParser.WRITE, 0); }
		public JsCommandContext jsCommand() {
			return GetRuleContext<JsCommandContext>(0);
		}
		public ITerminalNode COMMAND_END() { return GetToken(EGCMDParser.COMMAND_END, 0); }
		public WriteCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_writeCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEGCMDListener typedListener = listener as IEGCMDListener;
			if (typedListener != null) typedListener.EnterWriteCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEGCMDListener typedListener = listener as IEGCMDListener;
			if (typedListener != null) typedListener.ExitWriteCommand(this);
		}
	}

	[RuleVersion(0)]
	public WriteCommandContext writeCommand() {
		WriteCommandContext _localctx = new WriteCommandContext(Context, State);
		EnterRule(_localctx, 8, RULE_writeCommand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 45; Match(WRITE);
			State = 46; jsCommand();
			State = 48;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMAND_END) {
				{
				State = 47; Match(COMMAND_END);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetColorCommandContext : ParserRuleContext {
		public ITerminalNode SET() { return GetToken(EGCMDParser.SET, 0); }
		public ITerminalNode COLOR() { return GetToken(EGCMDParser.COLOR, 0); }
		public JsCommandContext jsCommand() {
			return GetRuleContext<JsCommandContext>(0);
		}
		public ITerminalNode COMMAND_END() { return GetToken(EGCMDParser.COMMAND_END, 0); }
		public SetColorCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setColorCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEGCMDListener typedListener = listener as IEGCMDListener;
			if (typedListener != null) typedListener.EnterSetColorCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEGCMDListener typedListener = listener as IEGCMDListener;
			if (typedListener != null) typedListener.ExitSetColorCommand(this);
		}
	}

	[RuleVersion(0)]
	public SetColorCommandContext setColorCommand() {
		SetColorCommandContext _localctx = new SetColorCommandContext(Context, State);
		EnterRule(_localctx, 10, RULE_setColorCommand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 50; Match(SET);
			State = 51; Match(COLOR);
			State = 52; jsCommand();
			State = 54;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMAND_END) {
				{
				State = 53; Match(COMMAND_END);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsCommandContext : ParserRuleContext {
		public ITerminalNode JS_END() { return GetToken(EGCMDParser.JS_END, 0); }
		public ITerminalNode[] JSCHAR() { return GetTokens(EGCMDParser.JSCHAR); }
		public ITerminalNode JSCHAR(int i) {
			return GetToken(EGCMDParser.JSCHAR, i);
		}
		public ITerminalNode Eof() { return GetToken(EGCMDParser.Eof, 0); }
		public JsCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsCommand; } }
		public override void EnterRule(IParseTreeListener listener) {
			IEGCMDListener typedListener = listener as IEGCMDListener;
			if (typedListener != null) typedListener.EnterJsCommand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IEGCMDListener typedListener = listener as IEGCMDListener;
			if (typedListener != null) typedListener.ExitJsCommand(this);
		}
	}

	[RuleVersion(0)]
	public JsCommandContext jsCommand() {
		JsCommandContext _localctx = new JsCommandContext(Context, State);
		EnterRule(_localctx, 12, RULE_jsCommand);
		try {
			int _alt;
			State = 68;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 57;
				ErrorHandler.Sync(this);
				_alt = 1+1;
				do {
					switch (_alt) {
					case 1+1:
						{
						{
						State = 56; Match(JSCHAR);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 59;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
				} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 61; Match(JS_END);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 63;
				ErrorHandler.Sync(this);
				_alt = 1+1;
				do {
					switch (_alt) {
					case 1+1:
						{
						{
						State = 62; Match(JSCHAR);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 65;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
				} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 67; Match(Eof);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x11', 'I', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x3', '\x2', '\x3', '\x2', '\a', '\x2', '\x13', '\n', '\x2', '\f', '\x2', 
		'\xE', '\x2', '\x16', '\v', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x5', '\x3', '\x1B', '\n', '\x3', '\x3', '\x4', '\a', '\x4', '\x1E', 
		'\n', '\x4', '\f', '\x4', '\xE', '\x4', '!', '\v', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x5', '\x5', '.', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x5', '\x6', '\x33', '\n', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x5', '\a', '\x39', '\n', '\a', '\x3', '\b', '\x6', '\b', 
		'<', '\n', '\b', '\r', '\b', '\xE', '\b', '=', '\x3', '\b', '\x3', '\b', 
		'\x6', '\b', '\x42', '\n', '\b', '\r', '\b', '\xE', '\b', '\x43', '\x3', 
		'\b', '\x5', '\b', 'G', '\n', '\b', '\x3', '\b', '\x4', '=', '\x43', '\x2', 
		'\t', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x2', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x2', 'K', '\x2', '\x10', '\x3', '\x2', '\x2', '\x2', 
		'\x4', '\x1A', '\x3', '\x2', '\x2', '\x2', '\x6', '\x1F', '\x3', '\x2', 
		'\x2', '\x2', '\b', '$', '\x3', '\x2', '\x2', '\x2', '\n', '/', '\x3', 
		'\x2', '\x2', '\x2', '\f', '\x34', '\x3', '\x2', '\x2', '\x2', '\xE', 
		'\x46', '\x3', '\x2', '\x2', '\x2', '\x10', '\x14', '\x5', '\x6', '\x4', 
		'\x2', '\x11', '\x13', '\x5', '\x4', '\x3', '\x2', '\x12', '\x11', '\x3', 
		'\x2', '\x2', '\x2', '\x13', '\x16', '\x3', '\x2', '\x2', '\x2', '\x14', 
		'\x12', '\x3', '\x2', '\x2', '\x2', '\x14', '\x15', '\x3', '\x2', '\x2', 
		'\x2', '\x15', '\x3', '\x3', '\x2', '\x2', '\x2', '\x16', '\x14', '\x3', 
		'\x2', '\x2', '\x2', '\x17', '\x1B', '\x5', '\b', '\x5', '\x2', '\x18', 
		'\x1B', '\x5', '\n', '\x6', '\x2', '\x19', '\x1B', '\x5', '\f', '\a', 
		'\x2', '\x1A', '\x17', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x18', '\x3', 
		'\x2', '\x2', '\x2', '\x1A', '\x19', '\x3', '\x2', '\x2', '\x2', '\x1B', 
		'\x5', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x1E', '\a', '\x4', '\x2', 
		'\x2', '\x1D', '\x1C', '\x3', '\x2', '\x2', '\x2', '\x1E', '!', '\x3', 
		'\x2', '\x2', '\x2', '\x1F', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x1F', 
		' ', '\x3', '\x2', '\x2', '\x2', ' ', '\"', '\x3', '\x2', '\x2', '\x2', 
		'!', '\x1F', '\x3', '\x2', '\x2', '\x2', '\"', '#', '\t', '\x2', '\x2', 
		'\x2', '#', '\a', '\x3', '\x2', '\x2', '\x2', '$', '%', '\a', '\a', '\x2', 
		'\x2', '%', '&', '\a', '\b', '\x2', '\x2', '&', '\'', '\a', '\xE', '\x2', 
		'\x2', '\'', '(', '\a', '\xE', '\x2', '\x2', '(', ')', '\a', '\t', '\x2', 
		'\x2', ')', '*', '\a', '\xF', '\x2', '\x2', '*', '+', '\a', '\n', '\x2', 
		'\x2', '+', '-', '\x5', '\xE', '\b', '\x2', ',', '.', '\a', '\x6', '\x2', 
		'\x2', '-', ',', '\x3', '\x2', '\x2', '\x2', '-', '.', '\x3', '\x2', '\x2', 
		'\x2', '.', '\t', '\x3', '\x2', '\x2', '\x2', '/', '\x30', '\a', '\v', 
		'\x2', '\x2', '\x30', '\x32', '\x5', '\xE', '\b', '\x2', '\x31', '\x33', 
		'\a', '\x6', '\x2', '\x2', '\x32', '\x31', '\x3', '\x2', '\x2', '\x2', 
		'\x32', '\x33', '\x3', '\x2', '\x2', '\x2', '\x33', '\v', '\x3', '\x2', 
		'\x2', '\x2', '\x34', '\x35', '\a', '\f', '\x2', '\x2', '\x35', '\x36', 
		'\a', '\r', '\x2', '\x2', '\x36', '\x38', '\x5', '\xE', '\b', '\x2', '\x37', 
		'\x39', '\a', '\x6', '\x2', '\x2', '\x38', '\x37', '\x3', '\x2', '\x2', 
		'\x2', '\x38', '\x39', '\x3', '\x2', '\x2', '\x2', '\x39', '\r', '\x3', 
		'\x2', '\x2', '\x2', ':', '<', '\a', '\x11', '\x2', '\x2', ';', ':', '\x3', 
		'\x2', '\x2', '\x2', '<', '=', '\x3', '\x2', '\x2', '\x2', '=', '>', '\x3', 
		'\x2', '\x2', '\x2', '=', ';', '\x3', '\x2', '\x2', '\x2', '>', '?', '\x3', 
		'\x2', '\x2', '\x2', '?', 'G', '\a', '\x10', '\x2', '\x2', '@', '\x42', 
		'\a', '\x11', '\x2', '\x2', '\x41', '@', '\x3', '\x2', '\x2', '\x2', '\x42', 
		'\x43', '\x3', '\x2', '\x2', '\x2', '\x43', '\x44', '\x3', '\x2', '\x2', 
		'\x2', '\x43', '\x41', '\x3', '\x2', '\x2', '\x2', '\x44', '\x45', '\x3', 
		'\x2', '\x2', '\x2', '\x45', 'G', '\a', '\x2', '\x2', '\x3', '\x46', ';', 
		'\x3', '\x2', '\x2', '\x2', '\x46', '\x41', '\x3', '\x2', '\x2', '\x2', 
		'G', '\xF', '\x3', '\x2', '\x2', '\x2', '\v', '\x14', '\x1A', '\x1F', 
		'-', '\x32', '\x38', '=', '\x43', '\x46',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
