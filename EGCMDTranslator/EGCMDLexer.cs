//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from EGCMDLexer.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class EGCMDLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		TEXT_END=1, TEXT=2, WS=3, COMMAND_END=4, REPEAT=5, AREA=6, VAR=7, IN=8, 
		WRITE=9, SET=10, COLOR=11, DIGIT=12, ID=13, JS_END=14, JSCHAR=15;
	public const int
		MODE_COMMAND=1, MODE_JSLEX=2;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE", "MODE_COMMAND", "MODE_JSLEX"
	};

	public static readonly string[] ruleNames = {
		"TEXT_END", "TEXT", "WS", "COMMAND_END", "REPEAT", "AREA", "VAR", "IN", 
		"WRITE", "SET", "COLOR", "DIGIT", "ID", "JS_END", "JSCHAR"
	};


	public EGCMDLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public EGCMDLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, "'REPEAT'", "'AREA'", "'VAR'", "'IN'", "'WRITE'", 
		"'SET'", "'COLOR'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "TEXT_END", "TEXT", "WS", "COMMAND_END", "REPEAT", "AREA", "VAR", 
		"IN", "WRITE", "SET", "COLOR", "DIGIT", "ID", "JS_END", "JSCHAR"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "EGCMDLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static EGCMDLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\x11', 'm', '\b', '\x1', '\b', '\x1', '\b', '\x1', '\x4', 
		'\x2', '\t', '\x2', '\x4', '\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', 
		'\x4', '\x5', '\t', '\x5', '\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', 
		'\a', '\x4', '\b', '\t', '\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', 
		'\n', '\x4', '\v', '\t', '\v', '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', 
		'\r', '\x4', '\xE', '\t', '\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', 
		'\t', '\x10', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x6', '\x4', '+', '\n', '\x4', 
		'\r', '\x4', '\xE', '\x4', ',', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x6', 
		'\r', ']', '\n', '\r', '\r', '\r', '\xE', '\r', '^', '\x3', '\xE', '\x3', 
		'\xE', '\a', '\xE', '\x63', '\n', '\xE', '\f', '\xE', '\xE', '\xE', '\x66', 
		'\v', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\x10', '\x3', '\x10', '\x2', '\x2', '\x11', '\x5', '\x3', '\a', '\x4', 
		'\t', '\x5', '\v', '\x6', '\r', '\a', '\xF', '\b', '\x11', '\t', '\x13', 
		'\n', '\x15', '\v', '\x17', '\f', '\x19', '\r', '\x1B', '\xE', '\x1D', 
		'\xF', '\x1F', '\x10', '!', '\x11', '\x5', '\x2', '\x3', '\x4', '\x6', 
		'\x5', '\x2', '\v', '\f', '\xF', '\xF', '\"', '\"', '\x3', '\x2', '\x32', 
		';', '\x4', '\x2', '\x43', '\\', '\x63', '|', '\x5', '\x2', '\x32', ';', 
		'\x43', '\\', '\x63', '|', '\x2', 'm', '\x2', '\x5', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\a', '\x3', '\x2', '\x2', '\x2', '\x3', '\t', '\x3', '\x2', 
		'\x2', '\x2', '\x3', '\v', '\x3', '\x2', '\x2', '\x2', '\x3', '\r', '\x3', 
		'\x2', '\x2', '\x2', '\x3', '\xF', '\x3', '\x2', '\x2', '\x2', '\x3', 
		'\x11', '\x3', '\x2', '\x2', '\x2', '\x3', '\x13', '\x3', '\x2', '\x2', 
		'\x2', '\x3', '\x15', '\x3', '\x2', '\x2', '\x2', '\x3', '\x17', '\x3', 
		'\x2', '\x2', '\x2', '\x3', '\x19', '\x3', '\x2', '\x2', '\x2', '\x3', 
		'\x1B', '\x3', '\x2', '\x2', '\x2', '\x3', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', '\x4', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x4', '!', '\x3', '\x2', 
		'\x2', '\x2', '\x5', '#', '\x3', '\x2', '\x2', '\x2', '\a', '\'', '\x3', 
		'\x2', '\x2', '\x2', '\t', '*', '\x3', '\x2', '\x2', '\x2', '\v', '\x30', 
		'\x3', '\x2', '\x2', '\x2', '\r', '\x32', '\x3', '\x2', '\x2', '\x2', 
		'\xF', '\x39', '\x3', '\x2', '\x2', '\x2', '\x11', '>', '\x3', '\x2', 
		'\x2', '\x2', '\x13', '\x42', '\x3', '\x2', '\x2', '\x2', '\x15', 'G', 
		'\x3', '\x2', '\x2', '\x2', '\x17', 'O', '\x3', '\x2', '\x2', '\x2', '\x19', 
		'S', '\x3', '\x2', '\x2', '\x2', '\x1B', '\\', '\x3', '\x2', '\x2', '\x2', 
		'\x1D', '`', '\x3', '\x2', '\x2', '\x2', '\x1F', 'g', '\x3', '\x2', '\x2', 
		'\x2', '!', 'k', '\x3', '\x2', '\x2', '\x2', '#', '$', '\a', '%', '\x2', 
		'\x2', '$', '%', '\x3', '\x2', '\x2', '\x2', '%', '&', '\b', '\x2', '\x2', 
		'\x2', '&', '\x6', '\x3', '\x2', '\x2', '\x2', '\'', '(', '\v', '\x2', 
		'\x2', '\x2', '(', '\b', '\x3', '\x2', '\x2', '\x2', ')', '+', '\t', '\x2', 
		'\x2', '\x2', '*', ')', '\x3', '\x2', '\x2', '\x2', '+', ',', '\x3', '\x2', 
		'\x2', '\x2', ',', '*', '\x3', '\x2', '\x2', '\x2', ',', '-', '\x3', '\x2', 
		'\x2', '\x2', '-', '.', '\x3', '\x2', '\x2', '\x2', '.', '/', '\b', '\x4', 
		'\x3', '\x2', '/', '\n', '\x3', '\x2', '\x2', '\x2', '\x30', '\x31', '\a', 
		'%', '\x2', '\x2', '\x31', '\f', '\x3', '\x2', '\x2', '\x2', '\x32', '\x33', 
		'\a', 'T', '\x2', '\x2', '\x33', '\x34', '\a', 'G', '\x2', '\x2', '\x34', 
		'\x35', '\a', 'R', '\x2', '\x2', '\x35', '\x36', '\a', 'G', '\x2', '\x2', 
		'\x36', '\x37', '\a', '\x43', '\x2', '\x2', '\x37', '\x38', '\a', 'V', 
		'\x2', '\x2', '\x38', '\xE', '\x3', '\x2', '\x2', '\x2', '\x39', ':', 
		'\a', '\x43', '\x2', '\x2', ':', ';', '\a', 'T', '\x2', '\x2', ';', '<', 
		'\a', 'G', '\x2', '\x2', '<', '=', '\a', '\x43', '\x2', '\x2', '=', '\x10', 
		'\x3', '\x2', '\x2', '\x2', '>', '?', '\a', 'X', '\x2', '\x2', '?', '@', 
		'\a', '\x43', '\x2', '\x2', '@', '\x41', '\a', 'T', '\x2', '\x2', '\x41', 
		'\x12', '\x3', '\x2', '\x2', '\x2', '\x42', '\x43', '\a', 'K', '\x2', 
		'\x2', '\x43', '\x44', '\a', 'P', '\x2', '\x2', '\x44', '\x45', '\x3', 
		'\x2', '\x2', '\x2', '\x45', '\x46', '\b', '\t', '\x4', '\x2', '\x46', 
		'\x14', '\x3', '\x2', '\x2', '\x2', 'G', 'H', '\a', 'Y', '\x2', '\x2', 
		'H', 'I', '\a', 'T', '\x2', '\x2', 'I', 'J', '\a', 'K', '\x2', '\x2', 
		'J', 'K', '\a', 'V', '\x2', '\x2', 'K', 'L', '\a', 'G', '\x2', '\x2', 
		'L', 'M', '\x3', '\x2', '\x2', '\x2', 'M', 'N', '\b', '\n', '\x4', '\x2', 
		'N', '\x16', '\x3', '\x2', '\x2', '\x2', 'O', 'P', '\a', 'U', '\x2', '\x2', 
		'P', 'Q', '\a', 'G', '\x2', '\x2', 'Q', 'R', '\a', 'V', '\x2', '\x2', 
		'R', '\x18', '\x3', '\x2', '\x2', '\x2', 'S', 'T', '\a', '\x45', '\x2', 
		'\x2', 'T', 'U', '\a', 'Q', '\x2', '\x2', 'U', 'V', '\a', 'N', '\x2', 
		'\x2', 'V', 'W', '\a', 'Q', '\x2', '\x2', 'W', 'X', '\a', 'T', '\x2', 
		'\x2', 'X', 'Y', '\x3', '\x2', '\x2', '\x2', 'Y', 'Z', '\b', '\f', '\x4', 
		'\x2', 'Z', '\x1A', '\x3', '\x2', '\x2', '\x2', '[', ']', '\t', '\x3', 
		'\x2', '\x2', '\\', '[', '\x3', '\x2', '\x2', '\x2', ']', '^', '\x3', 
		'\x2', '\x2', '\x2', '^', '\\', '\x3', '\x2', '\x2', '\x2', '^', '_', 
		'\x3', '\x2', '\x2', '\x2', '_', '\x1C', '\x3', '\x2', '\x2', '\x2', '`', 
		'\x64', '\t', '\x4', '\x2', '\x2', '\x61', '\x63', '\t', '\x5', '\x2', 
		'\x2', '\x62', '\x61', '\x3', '\x2', '\x2', '\x2', '\x63', '\x66', '\x3', 
		'\x2', '\x2', '\x2', '\x64', '\x62', '\x3', '\x2', '\x2', '\x2', '\x64', 
		'\x65', '\x3', '\x2', '\x2', '\x2', '\x65', '\x1E', '\x3', '\x2', '\x2', 
		'\x2', '\x66', '\x64', '\x3', '\x2', '\x2', '\x2', 'g', 'h', '\a', '%', 
		'\x2', '\x2', 'h', 'i', '\x3', '\x2', '\x2', '\x2', 'i', 'j', '\b', '\xF', 
		'\x2', '\x2', 'j', ' ', '\x3', '\x2', '\x2', '\x2', 'k', 'l', '\v', '\x2', 
		'\x2', '\x2', 'l', '\"', '\x3', '\x2', '\x2', '\x2', '\b', '\x2', '\x3', 
		'\x4', ',', '^', '\x64', '\x5', '\x4', '\x3', '\x2', '\b', '\x2', '\x2', 
		'\x4', '\x4', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
