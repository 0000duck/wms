//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from EMacroLexer.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class EMacroLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		TEXT_SHARP=1, TEXT_AT=2, TEXT=3, WS=4, COMMAND_SHARP=5, REPEAT=6, AREA=7, 
		VAR=8, IN=9, WRITE=10, SET=11, COLOR=12, DIGIT=13, ID=14, JS_SHARP=15, 
		JS_AT=16, JSTEXT=17;
	public const int
		MODE_COMMAND=1, MODE_JSLEX=2;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE", "MODE_COMMAND", "MODE_JSLEX"
	};

	public static readonly string[] ruleNames = {
		"TEXT_SHARP", "TEXT_AT", "TEXT", "WS", "COMMAND_SHARP", "REPEAT", "AREA", 
		"VAR", "IN", "WRITE", "SET", "COLOR", "DIGIT", "ID", "JS_SHARP", "JS_AT", 
		"JSTEXT"
	};


	public EMacroLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public EMacroLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, "'REPEAT'", "'AREA'", "'VAR'", "'IN'", 
		"'WRITE'", "'SET'", "'COLOR'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "TEXT_SHARP", "TEXT_AT", "TEXT", "WS", "COMMAND_SHARP", "REPEAT", 
		"AREA", "VAR", "IN", "WRITE", "SET", "COLOR", "DIGIT", "ID", "JS_SHARP", 
		"JS_AT", "JSTEXT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "EMacroLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static EMacroLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\x13', '\x7F', '\b', '\x1', '\b', '\x1', '\b', '\x1', 
		'\x4', '\x2', '\t', '\x2', '\x4', '\x3', '\t', '\x3', '\x4', '\x4', '\t', 
		'\x4', '\x4', '\x5', '\t', '\x5', '\x4', '\x6', '\t', '\x6', '\x4', '\a', 
		'\t', '\a', '\x4', '\b', '\t', '\b', '\x4', '\t', '\t', '\t', '\x4', '\n', 
		'\t', '\n', '\x4', '\v', '\t', '\v', '\x4', '\f', '\t', '\f', '\x4', '\r', 
		'\t', '\r', '\x4', '\xE', '\t', '\xE', '\x4', '\xF', '\t', '\xF', '\x4', 
		'\x10', '\t', '\x10', '\x4', '\x11', '\t', '\x11', '\x4', '\x12', '\t', 
		'\x12', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x6', 
		'\x4', '\x31', '\n', '\x4', '\r', '\x4', '\xE', '\x4', '\x32', '\x3', 
		'\x5', '\x6', '\x5', '\x36', '\n', '\x5', '\r', '\x5', '\xE', '\x5', '\x37', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\xE', '\x6', '\xE', 'h', '\n', '\xE', '\r', '\xE', 
		'\xE', '\xE', 'i', '\x3', '\xF', '\x3', '\xF', '\a', '\xF', 'n', '\n', 
		'\xF', '\f', '\xF', '\xE', '\xF', 'q', '\v', '\xF', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x12', '\x6', '\x12', '|', '\n', '\x12', 
		'\r', '\x12', '\xE', '\x12', '}', '\x2', '\x2', '\x13', '\x5', '\x3', 
		'\a', '\x4', '\t', '\x5', '\v', '\x6', '\r', '\a', '\xF', '\b', '\x11', 
		'\t', '\x13', '\n', '\x15', '\v', '\x17', '\f', '\x19', '\r', '\x1B', 
		'\xE', '\x1D', '\xF', '\x1F', '\x10', '!', '\x11', '#', '\x12', '%', '\x13', 
		'\x5', '\x2', '\x3', '\x4', '\a', '\x4', '\x2', '%', '%', '\x42', '\x42', 
		'\x5', '\x2', '\v', '\f', '\xF', '\xF', '\"', '\"', '\x3', '\x2', '\x32', 
		';', '\x4', '\x2', '\x43', '\\', '\x63', '|', '\x5', '\x2', '\x32', ';', 
		'\x43', '\\', '\x63', '|', '\x2', '\x81', '\x2', '\x5', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\a', '\x3', '\x2', '\x2', '\x2', '\x2', '\t', '\x3', 
		'\x2', '\x2', '\x2', '\x3', '\v', '\x3', '\x2', '\x2', '\x2', '\x3', '\r', 
		'\x3', '\x2', '\x2', '\x2', '\x3', '\xF', '\x3', '\x2', '\x2', '\x2', 
		'\x3', '\x11', '\x3', '\x2', '\x2', '\x2', '\x3', '\x13', '\x3', '\x2', 
		'\x2', '\x2', '\x3', '\x15', '\x3', '\x2', '\x2', '\x2', '\x3', '\x17', 
		'\x3', '\x2', '\x2', '\x2', '\x3', '\x19', '\x3', '\x2', '\x2', '\x2', 
		'\x3', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x3', '\x1D', '\x3', '\x2', 
		'\x2', '\x2', '\x3', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x4', '!', '\x3', 
		'\x2', '\x2', '\x2', '\x4', '#', '\x3', '\x2', '\x2', '\x2', '\x4', '%', 
		'\x3', '\x2', '\x2', '\x2', '\x5', '\'', '\x3', '\x2', '\x2', '\x2', '\a', 
		'+', '\x3', '\x2', '\x2', '\x2', '\t', '\x30', '\x3', '\x2', '\x2', '\x2', 
		'\v', '\x35', '\x3', '\x2', '\x2', '\x2', '\r', ';', '\x3', '\x2', '\x2', 
		'\x2', '\xF', '=', '\x3', '\x2', '\x2', '\x2', '\x11', '\x44', '\x3', 
		'\x2', '\x2', '\x2', '\x13', 'I', '\x3', '\x2', '\x2', '\x2', '\x15', 
		'M', '\x3', '\x2', '\x2', '\x2', '\x17', 'R', '\x3', '\x2', '\x2', '\x2', 
		'\x19', 'Z', '\x3', '\x2', '\x2', '\x2', '\x1B', '^', '\x3', '\x2', '\x2', 
		'\x2', '\x1D', 'g', '\x3', '\x2', '\x2', '\x2', '\x1F', 'k', '\x3', '\x2', 
		'\x2', '\x2', '!', 'r', '\x3', '\x2', '\x2', '\x2', '#', 'v', '\x3', '\x2', 
		'\x2', '\x2', '%', '{', '\x3', '\x2', '\x2', '\x2', '\'', '(', '\a', '%', 
		'\x2', '\x2', '(', ')', '\x3', '\x2', '\x2', '\x2', ')', '*', '\b', '\x2', 
		'\x2', '\x2', '*', '\x6', '\x3', '\x2', '\x2', '\x2', '+', ',', '\a', 
		'\x42', '\x2', '\x2', ',', '-', '\x3', '\x2', '\x2', '\x2', '-', '.', 
		'\b', '\x3', '\x3', '\x2', '.', '\b', '\x3', '\x2', '\x2', '\x2', '/', 
		'\x31', '\n', '\x2', '\x2', '\x2', '\x30', '/', '\x3', '\x2', '\x2', '\x2', 
		'\x31', '\x32', '\x3', '\x2', '\x2', '\x2', '\x32', '\x30', '\x3', '\x2', 
		'\x2', '\x2', '\x32', '\x33', '\x3', '\x2', '\x2', '\x2', '\x33', '\n', 
		'\x3', '\x2', '\x2', '\x2', '\x34', '\x36', '\t', '\x3', '\x2', '\x2', 
		'\x35', '\x34', '\x3', '\x2', '\x2', '\x2', '\x36', '\x37', '\x3', '\x2', 
		'\x2', '\x2', '\x37', '\x35', '\x3', '\x2', '\x2', '\x2', '\x37', '\x38', 
		'\x3', '\x2', '\x2', '\x2', '\x38', '\x39', '\x3', '\x2', '\x2', '\x2', 
		'\x39', ':', '\b', '\x5', '\x4', '\x2', ':', '\f', '\x3', '\x2', '\x2', 
		'\x2', ';', '<', '\a', '%', '\x2', '\x2', '<', '\xE', '\x3', '\x2', '\x2', 
		'\x2', '=', '>', '\a', 'T', '\x2', '\x2', '>', '?', '\a', 'G', '\x2', 
		'\x2', '?', '@', '\a', 'R', '\x2', '\x2', '@', '\x41', '\a', 'G', '\x2', 
		'\x2', '\x41', '\x42', '\a', '\x43', '\x2', '\x2', '\x42', '\x43', '\a', 
		'V', '\x2', '\x2', '\x43', '\x10', '\x3', '\x2', '\x2', '\x2', '\x44', 
		'\x45', '\a', '\x43', '\x2', '\x2', '\x45', '\x46', '\a', 'T', '\x2', 
		'\x2', '\x46', 'G', '\a', 'G', '\x2', '\x2', 'G', 'H', '\a', '\x43', '\x2', 
		'\x2', 'H', '\x12', '\x3', '\x2', '\x2', '\x2', 'I', 'J', '\a', 'X', '\x2', 
		'\x2', 'J', 'K', '\a', '\x43', '\x2', '\x2', 'K', 'L', '\a', 'T', '\x2', 
		'\x2', 'L', '\x14', '\x3', '\x2', '\x2', '\x2', 'M', 'N', '\a', 'K', '\x2', 
		'\x2', 'N', 'O', '\a', 'P', '\x2', '\x2', 'O', 'P', '\x3', '\x2', '\x2', 
		'\x2', 'P', 'Q', '\b', '\n', '\x3', '\x2', 'Q', '\x16', '\x3', '\x2', 
		'\x2', '\x2', 'R', 'S', '\a', 'Y', '\x2', '\x2', 'S', 'T', '\a', 'T', 
		'\x2', '\x2', 'T', 'U', '\a', 'K', '\x2', '\x2', 'U', 'V', '\a', 'V', 
		'\x2', '\x2', 'V', 'W', '\a', 'G', '\x2', '\x2', 'W', 'X', '\x3', '\x2', 
		'\x2', '\x2', 'X', 'Y', '\b', '\v', '\x3', '\x2', 'Y', '\x18', '\x3', 
		'\x2', '\x2', '\x2', 'Z', '[', '\a', 'U', '\x2', '\x2', '[', '\\', '\a', 
		'G', '\x2', '\x2', '\\', ']', '\a', 'V', '\x2', '\x2', ']', '\x1A', '\x3', 
		'\x2', '\x2', '\x2', '^', '_', '\a', '\x45', '\x2', '\x2', '_', '`', '\a', 
		'Q', '\x2', '\x2', '`', '\x61', '\a', 'N', '\x2', '\x2', '\x61', '\x62', 
		'\a', 'Q', '\x2', '\x2', '\x62', '\x63', '\a', 'T', '\x2', '\x2', '\x63', 
		'\x64', '\x3', '\x2', '\x2', '\x2', '\x64', '\x65', '\b', '\r', '\x3', 
		'\x2', '\x65', '\x1C', '\x3', '\x2', '\x2', '\x2', '\x66', 'h', '\t', 
		'\x4', '\x2', '\x2', 'g', '\x66', '\x3', '\x2', '\x2', '\x2', 'h', 'i', 
		'\x3', '\x2', '\x2', '\x2', 'i', 'g', '\x3', '\x2', '\x2', '\x2', 'i', 
		'j', '\x3', '\x2', '\x2', '\x2', 'j', '\x1E', '\x3', '\x2', '\x2', '\x2', 
		'k', 'o', '\t', '\x5', '\x2', '\x2', 'l', 'n', '\t', '\x6', '\x2', '\x2', 
		'm', 'l', '\x3', '\x2', '\x2', '\x2', 'n', 'q', '\x3', '\x2', '\x2', '\x2', 
		'o', 'm', '\x3', '\x2', '\x2', '\x2', 'o', 'p', '\x3', '\x2', '\x2', '\x2', 
		'p', ' ', '\x3', '\x2', '\x2', '\x2', 'q', 'o', '\x3', '\x2', '\x2', '\x2', 
		'r', 's', '\a', '%', '\x2', '\x2', 's', 't', '\x3', '\x2', '\x2', '\x2', 
		't', 'u', '\b', '\x10', '\x2', '\x2', 'u', '\"', '\x3', '\x2', '\x2', 
		'\x2', 'v', 'w', '\a', '\x42', '\x2', '\x2', 'w', 'x', '\x3', '\x2', '\x2', 
		'\x2', 'x', 'y', '\b', '\x11', '\x3', '\x2', 'y', '$', '\x3', '\x2', '\x2', 
		'\x2', 'z', '|', '\n', '\x2', '\x2', '\x2', '{', 'z', '\x3', '\x2', '\x2', 
		'\x2', '|', '}', '\x3', '\x2', '\x2', '\x2', '}', '{', '\x3', '\x2', '\x2', 
		'\x2', '}', '~', '\x3', '\x2', '\x2', '\x2', '~', '&', '\x3', '\x2', '\x2', 
		'\x2', '\n', '\x2', '\x3', '\x4', '\x32', '\x37', 'i', 'o', '}', '\x5', 
		'\x4', '\x3', '\x2', '\x4', '\x4', '\x2', '\b', '\x2', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
